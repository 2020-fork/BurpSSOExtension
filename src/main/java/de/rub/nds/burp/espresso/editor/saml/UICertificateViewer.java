/**
 * EsPReSSO - Extension for Processing and Recognition of Single Sign-On Protocols.
 * Copyright (C) 2015 Tim Guenther and Christian Mainka
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package de.rub.nds.burp.espresso.editor.saml;

import burp.IBurpExtenderCallbacks;
import burp.IExtensionHelpers;
import de.rub.nds.burp.utilities.Logging;
import de.rub.nds.burp.utilities.XMLHelper;
import de.rub.nds.burp.utilities.listeners.AbstractCodeEvent;
import de.rub.nds.burp.utilities.listeners.CodeListenerController;
import de.rub.nds.burp.utilities.listeners.ICodeListener;
import java.awt.Font;
import java.io.ByteArrayInputStream;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

/**
 *
 * @author user
 */
public class UICertificateViewer extends javax.swing.JPanel implements ICodeListener {
    
    private final IBurpExtenderCallbacks callbacks;
    private final IExtensionHelpers helpers;
    
    private CodeListenerController listeners = null;
    private JLabel jLabelNoCert;
    private String code;
    private ArrayList<X509Certificate> certificates;
    private DefaultListModel certificatePaths;

    /**
     * Creates new form UICertificateViewer
     */
    public UICertificateViewer(IBurpExtenderCallbacks callbacks) {
        this.callbacks = callbacks;
        this.helpers = callbacks.getHelpers();
        jLabelNoCert = new JLabel("No certificates recognized.");
        jLabelNoCert.setFont(new Font("Dialog", 1, 15));
        this.add(jLabelNoCert); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCertificateNames = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaCertificate = new javax.swing.JTextArea();

        jLabel1.setText("Select Certificate:");

        jListCertificateNames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListCertificateNames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListCertificateNamesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListCertificateNames);

        jLabel2.setText("Selected Certificate:");

        jTextAreaCertificate.setColumns(20);
        jTextAreaCertificate.setRows(5);
        jScrollPane2.setViewportView(jTextAreaCertificate);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jListCertificateNamesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListCertificateNamesValueChanged
        X509Certificate cert = certificates.get(jListCertificateNames.getSelectedIndex());
        jTextAreaCertificate.setText(cert.toString());
    }//GEN-LAST:event_jListCertificateNamesValueChanged

    public boolean containsCertificate() {
        Document doc = XMLHelper.stringToDom(code);
        if(doc != null) {
            return doc.getElementsByTagNameNS("*", "X509Certificate").getLength() != 0;
        } else {
            return false;
        }
    }
   
    private void update() {
        certificates = new ArrayList<>();
        certificatePaths = new DefaultListModel();
        NodeList list = XMLHelper.stringToDom(code).getElementsByTagNameNS("*", "X509Certificate");
        for(int i = 0; i < list.getLength(); i++) {
            try {
                CertificateFactory cf = CertificateFactory.getInstance("X.509");
                X509Certificate certificate = (X509Certificate) cf.generateCertificate(
                        new ByteArrayInputStream(helpers.base64Decode(list.item(i).getTextContent())));
                certificates.add(certificate);
                certificatePaths.addElement(XMLHelper.getAbsolutePath(list.item(i)));
            } catch (CertificateException ex) {
                Logging.getInstance().log(getClass(), ex);
            }
        }
        jListCertificateNames.setModel(certificatePaths);
        jListCertificateNames.setSelectedIndex(0);
    }
    
    /**
     * Is called every time new Code is available.
     * @param evt {@link de.rub.nds.burp.utilities.listeners.AbstractCodeEvent} The new source code.
     */
    @Override
    public void setCode(AbstractCodeEvent evt) {
        code = evt.getCode();
        if(containsCertificate()) {
            this.removeAll();
            initComponents();
            update();
        } else {
            this.removeAll();
            this.add(jLabelNoCert);
        }
    }

    /**
     * Set the listener for the editor.
     * @param listeners {@link de.rub.nds.burp.utilities.listeners.CodeListenerController}
     */
    @Override
    public void setListener(CodeListenerController listeners) {
        this.listeners = listeners;
        this.listeners.addCodeListener(this);
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jListCertificateNames;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaCertificate;
    // End of variables declaration//GEN-END:variables
}
