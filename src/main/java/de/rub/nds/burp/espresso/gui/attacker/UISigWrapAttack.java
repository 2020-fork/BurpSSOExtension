/**
 * EsPReSSO - Extension for Processing and Recognition of Single Sign-On Protocols.
 * Copyright (C) 2015/ Tim Guenther and Christian Mainka
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package de.rub.nds.burp.espresso.gui.attacker;

import burp.ITextEditor;
import de.rub.nds.burp.utilities.Logging;
import java.util.List;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import wsattacker.library.schemaanalyzer.SchemaAnalyzer;
import wsattacker.library.schemaanalyzer.SchemaAnalyzerFactory;
import wsattacker.library.signatureWrapping.option.Payload;
import wsattacker.library.signatureWrapping.util.exception.InvalidWeaknessException;
import wsattacker.library.signatureWrapping.util.signature.SignatureManager;
import wsattacker.library.signatureWrapping.xpath.weakness.util.WeaknessLog;
import wsattacker.library.signatureWrapping.xpath.wrapping.WrappingOracle;
import wsattacker.library.xmlutilities.dom.DomUtilities;
//import wsattacker.library.xmlutilities.dom.DomUtilities;


/**
 *
 * @author Tim Guenther
 */
public class UISigWrapAttack extends javax.swing.JPanel {

	private String xmlMessage = null;
	private ITextEditor txtInput = null;

	/**
	 * Creates new form UISigWrapAttack
	 */
	public UISigWrapAttack(String xmlMessage, ITextEditor txtInput) throws SAXException {
		this.xmlMessage = xmlMessage;
		this.txtInput = txtInput;
		initXsw();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

                signatureManager = signatureManager;
                payloadBean = new de.rub.nds.burp.espresso.gui.attacker.util.PayloadBean();
                jLabel1 = new javax.swing.JLabel();
                attackSlider = new javax.swing.JSlider();
                attackNumber = new javax.swing.JTextField();
                attackSliderLabel = new javax.swing.JLabel();
                attackLabel = new javax.swing.JLabel();
                jScrollPane1 = new javax.swing.JScrollPane();
                attackDescriptionTextArea = new javax.swing.JTextArea();
                jLabel2 = new javax.swing.JLabel();
                selectedPayloadListScrollBar = new javax.swing.JScrollPane();
                selectedPayloadList = new javax.swing.JList();
                payloadXmlScrollPane = new org.fife.ui.rtextarea.RTextScrollPane();
                payloadXml = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
                jButton1 = new javax.swing.JButton();

                org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, selectedPayloadList, org.jdesktop.beansbinding.ELProperty.create("${selectedElement_IGNORE_ADJUSTING}"), payloadBean, org.jdesktop.beansbinding.BeanProperty.create("payload"));
                bindingGroup.addBinding(binding);

                jLabel1.setText("Signature Wrapping Attack");

                attackSlider.setMaximum(200);
                attackSlider.setToolTipText("Choose an attack.");
                attackSlider.setValue(0);
                attackSlider.addChangeListener(new javax.swing.event.ChangeListener() {
                        public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                attackSliderStateChanged(evt);
                        }
                });

                attackNumber.setToolTipText("Set the attack manually");

                binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, attackSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), attackNumber, org.jdesktop.beansbinding.BeanProperty.create("text"));
                bindingGroup.addBinding(binding);

                attackSliderLabel.setText("Choose Attack");

                attackLabel.setText("Attack Description:");

                attackDescriptionTextArea.setEditable(false);
                attackDescriptionTextArea.setBackground(new java.awt.Color(238, 238, 238));
                attackDescriptionTextArea.setColumns(20);
                attackDescriptionTextArea.setRows(5);
                attackDescriptionTextArea.setText("No attack description.");
                attackDescriptionTextArea.setFocusable(false);
                jScrollPane1.setViewportView(attackDescriptionTextArea);

                jLabel2.setText("Payload");

                selectedPayloadList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

                org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${payloads}");
                org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, signatureManager, eLProperty, selectedPayloadList);
                jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${signedElement.tagName}"));
                bindingGroup.addBinding(jListBinding);

                selectedPayloadListScrollBar.setViewportView(selectedPayloadList);

                payloadXmlScrollPane.setLineNumbersEnabled(true);

                payloadXml.setColumns(20);
                payloadXml.setLineWrap(true);
                payloadXml.setRows(5);
                payloadXml.setSyntaxEditingStyle("text/xml");

                binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, payloadBean, org.jdesktop.beansbinding.ELProperty.create("${payload.value}"), payloadXml, org.jdesktop.beansbinding.BeanProperty.create("text"));
                bindingGroup.addBinding(binding);

                payloadXmlScrollPane.setViewportView(payloadXml);

                jButton1.setText("Do");
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton1ActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(attackLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(attackSliderLabel)
                                                        .addComponent(jLabel2))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(attackSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(attackNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(selectedPayloadListScrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(payloadXmlScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jButton1)))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(payloadXmlScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(selectedPayloadListScrollBar, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(attackNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(attackSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(attackSliderLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(attackLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                );

                bindingGroup.bind();
        }// </editor-fold>//GEN-END:initComponents

    private void attackSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_attackSliderStateChanged
	    int attack = attackSlider.getValue();
	    try {
		    Document attackDoc = wrappingOracle.getPossibility(attack);
		    String attackString = DomUtilities.domToString(attackDoc);
		    payloadXml.setText(attackString);
		    attackDescriptionTextArea.setText(WeaknessLog.representation());
	    } catch (InvalidWeaknessException ex) {
		    Logging.getInstance().log(getClass().getName(), ex);
	    }
    }//GEN-LAST:event_attackSliderStateChanged

        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                // TODO add your handling code here:
		jButton1.setText(payloadBean.getPayload().getSignedElement().getLocalName());
        }//GEN-LAST:event_jButton1ActionPerformed

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JTextArea attackDescriptionTextArea;
        private javax.swing.JLabel attackLabel;
        private javax.swing.JTextField attackNumber;
        private javax.swing.JSlider attackSlider;
        private javax.swing.JLabel attackSliderLabel;
        private javax.swing.JButton jButton1;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JScrollPane jScrollPane1;
        private de.rub.nds.burp.espresso.gui.attacker.util.PayloadBean payloadBean;
        private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea payloadXml;
        private org.fife.ui.rtextarea.RTextScrollPane payloadXmlScrollPane;
        private javax.swing.JList selectedPayloadList;
        private javax.swing.JScrollPane selectedPayloadListScrollBar;
        private wsattacker.library.signatureWrapping.util.signature.SignatureManager signatureManager;
        private org.jdesktop.beansbinding.BindingGroup bindingGroup;
        // End of variables declaration//GEN-END:variables

	private void initXsw() throws SAXException {
		Document doc = DomUtilities.stringToDom(xmlMessage);
		signatureManager = new SignatureManager();
		signatureManager.setDocument(doc);
	}

	private void updateWrappingOracle() {
		Document samlDoc = signatureManager.getDocument();
		List<Payload> payloadList = signatureManager.getPayloads();
		wrappingOracle = new WrappingOracle(samlDoc, payloadList, samlSchemaAnalyser);
		final int max = wrappingOracle.maxPossibilities();
		attackSlider.setMaximum(max);
		if (max > 0) {
			attackSlider.setValue(1);
		}
	}

	private WrappingOracle wrappingOracle;

	private static SchemaAnalyzer samlSchemaAnalyser = SchemaAnalyzerFactory.getInstance(SchemaAnalyzerFactory.SAML);

}
