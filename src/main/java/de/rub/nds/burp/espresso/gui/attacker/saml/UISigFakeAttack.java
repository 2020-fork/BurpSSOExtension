/**
 * EsPReSSO - Extension for Processing and Recognition of Single Sign-On Protocols. 
 * Copyright (C) 2015/ Tim Guenther and Christian Mainka
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package de.rub.nds.burp.espresso.gui.attacker.saml;

import de.rub.nds.burp.espresso.gui.attacker.saml.IAttack;
import de.rub.nds.burp.utilities.Logging;
import de.rub.nds.burp.utilities.listeners.AbstractCodeEvent;
import de.rub.nds.burp.utilities.listeners.CodeListenerController;
import de.rub.nds.burp.utilities.listeners.saml.SamlCodeEvent;
import wsattacker.library.signatureFaking.SignatureFakingOracle;
import wsattacker.library.signatureFaking.exceptions.SignatureFakingException;

/**
 *
 * @author Tim Guenther
 */
public class UISigFakeAttack extends javax.swing.JPanel implements IAttack{
    private String code = null;
    private CodeListenerController listeners = null;

    /**
     * Creates new form UISigFakeAttack
     */
    public UISigFakeAttack() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headlineLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        modifyButton = new javax.swing.JButton();

        headlineLabel.setText("Signature Faking Attack");

        descriptionLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        descriptionLabel.setText("For the Signature Faking Attack is no Configuration needed. Click on the button below to modify the current Message.");

        modifyButton.setText("Modify");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headlineLabel)
                            .addComponent(modifyButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headlineLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descriptionLabel)
                .addGap(18, 18, 18)
                .addComponent(modifyButton)
                .addContainerGap(218, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        if(code != null){
            Logging.getInstance().log(getClass().getName(), "Start signature faking.", false);
            try {
                SignatureFakingOracle sof = new SignatureFakingOracle(code);
                sof.fakeSignatures();
                
                notifyAllTabs(code);
                
                Logging.getInstance().log(getClass().getName(), "Signature faking successfull.", false);
            } catch (SignatureFakingException ex) {
                Logging.getInstance().log(getClass().getName(), ex);
            }
        } else {
            Logging.getInstance().log(getClass().getName(), "No data to fake the signature, code is null.", true);
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    @Override
    public void setCode(AbstractCodeEvent evt) {
        this.code = evt.getCode();
    }

    @Override
    public void notifyAllTabs(String code) {
        if(listeners != null){
            listeners.notifyAll(new SamlCodeEvent(this, code));
        }
    }

    @Override
    public void setListener(CodeListenerController listeners) {
        this.listeners = listeners;
        this.listeners.addCodeListener(this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JLabel headlineLabel;
    private javax.swing.JButton modifyButton;
    // End of variables declaration//GEN-END:variables
}
