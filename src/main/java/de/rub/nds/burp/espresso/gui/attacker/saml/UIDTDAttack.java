/**
 * EsPReSSO - Extension for Processing and Recognition of Single Sign-On Protocols.
 * Copyright (C) 2015 Tim Guenther and Christian Mainka
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package de.rub.nds.burp.espresso.gui.attacker.saml;

import de.rub.nds.burp.espresso.gui.attacker.IAttack;
import de.rub.nds.burp.utilities.Logging;
import de.rub.nds.burp.utilities.XMLHelper;
import de.rub.nds.burp.utilities.listeners.AbstractCodeEvent;
import de.rub.nds.burp.utilities.listeners.CodeListenerController;
import de.rub.nds.burp.utilities.listeners.saml.SamlCodeEvent;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import org.apache.commons.io.FileUtils;
import org.w3c.dom.Document;

/**
 * The DTD Attack
 * @author Nurullah Erinola
 * @version 1.0
 */
public class UIDTDAttack extends javax.swing.JPanel implements IAttack{
    
    private final String listenURL = "§tf_listenURL§";
    private final String helperURL = "§tf_helperURL§";
    private final String targetFILE = "§tf_targetFILE§";
    
    private String code = "";
    private String selectedDtdServer = "";
    private String selectedDtdHelper = "";
    private String currentDtdServer = "";
    private String currentDtdHelper = "";
    private CodeListenerController listeners = null;
    private ArrayList<Document> dtds;
    private ArrayList<String> dtdNames;
    private boolean needEditor = false;
    
    private JTextArea firstEditor;
    private JTextArea secondEditor;
    private JScrollPane firstScrollPane;
    private JScrollPane secondScrollPane;
    
    /**
     * Creates new form UIDTDAttack
     */
    public UIDTDAttack() {
        initComponents();
        firstEditor = new JTextArea();
        firstEditor.setEditable(false);
        secondEditor = new JTextArea();
        secondEditor.setEditable(false);
        firstScrollPane = new JScrollPane (firstEditor, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        firstScrollPane.setPreferredSize(new Dimension(100, 280));
        secondScrollPane = new JScrollPane (secondEditor, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        secondScrollPane.setPreferredSize(new Dimension(100, 280));
        readDTDs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modifyButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        recursiveEntitieTextField = new javax.swing.JTextField();
        entityReferencesTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        targetFileTextField = new javax.swing.JTextField();
        helperURLTextField = new javax.swing.JTextField();
        attackeListenerTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        targetFileList = new javax.swing.JList<>();
        dtdComboBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        adjustDTDButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        modifyButton.setText("Modify");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Recursive Entitie:");

        jLabel4.setText("Entity References:");

        recursiveEntitieTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        recursiveEntitieTextField.setText("4");
        recursiveEntitieTextField.setEnabled(false);

        entityReferencesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        entityReferencesTextField.setText("5");
        entityReferencesTextField.setEnabled(false);

        jLabel5.setText("Target File:");

        jLabel6.setText("Helper-URL:");

        jLabel7.setText("Attacke Listener:");

        targetFileTextField.setEnabled(false);

        helperURLTextField.setEnabled(false);

        attackeListenerTextField.setEnabled(false);

        targetFileList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "/etc/hostname", "/dev/urandom", "TODO: add Windows" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        targetFileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        targetFileList.setEnabled(false);
        targetFileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                targetFileListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(targetFileList);

        dtdComboBox.setToolTipText("");
        dtdComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dtdComboBoxItemStateChanged(evt);
            }
        });

        jLabel8.setText("Select DTD:");

        jLabel9.setText("Selected DTD: ");

        adjustDTDButton.setText("Adjust");
        adjustDTDButton.setEnabled(false);
        adjustDTDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjustDTDButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dtdComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 854, Short.MAX_VALUE)
                        .addComponent(modifyButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(recursiveEntitieTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(adjustDTDButton)
                                .addComponent(entityReferencesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attackeListenerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(helperURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(targetFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(helperURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(attackeListenerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(recursiveEntitieTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(targetFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(entityReferencesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adjustDTDButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modifyButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        Logging.getInstance().log(getClass(), "DRINNE", Logging.DEBUG);
        notifyAllTabs(firstEditor.getText());
        Logging.getInstance().log(getClass(), "Notify all tabs.", Logging.DEBUG);
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void dtdComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dtdComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            disableAndClearTextfields();
            // Enable textfields
            int pos = dtdNames.indexOf(evt.getItem().toString());
            needEditor = dtds.get(pos).getElementsByTagName("attackvector").getLength() == 2;        
            if (dtds.get(pos).getElementsByTagName("dosbox").item(0).getTextContent().equalsIgnoreCase("TRUE")) {
                recursiveEntitieTextField.setEnabled(true);
                entityReferencesTextField.setEnabled(true);
                adjustDTDButton.setEnabled(true);
            }
            if (dtds.get(pos).getElementsByTagName("targetFile").item(0).getTextContent().equalsIgnoreCase("TRUE")) {
                targetFileTextField.setEnabled(true);
                targetFileList.setEnabled(true);
            }
            if (dtds.get(pos).getElementsByTagName("helperURL").item(0).getTextContent().equalsIgnoreCase("TRUE")) {
                helperURLTextField.setEnabled(true);
            }            
            if (dtds.get(pos).getElementsByTagName("attackListenerURL").item(0).getTextContent().equalsIgnoreCase("TRUE")) {
                attackeListenerTextField.setEnabled(true);
            }
            selectedDtdServer = dtds.get(pos).getElementsByTagName("attackvector").item(0).getTextContent();
            selectedDtdServer = selectedDtdServer.substring(selectedDtdServer.indexOf("<"), selectedDtdServer.lastIndexOf(">")+1);
            currentDtdServer = selectedDtdServer;
            if(needEditor) {
                selectedDtdHelper = dtds.get(pos).getElementsByTagName("attackvector").item(1).getTextContent();
                selectedDtdHelper = selectedDtdHelper.substring(selectedDtdHelper.indexOf("<"), selectedDtdHelper.lastIndexOf(">")+1);
                currentDtdHelper = selectedDtdHelper;
                jPanel1.setLayout(new GridLayout(1, 2));
                jPanel1.removeAll();
                jPanel1.add(firstScrollPane);
                jPanel1.add(secondScrollPane);
            } else {
                jPanel1.setLayout(new GridLayout(1, 1));
                jPanel1.removeAll();
                jPanel1.add(firstScrollPane);
            }
            setDTD();
        }
    }//GEN-LAST:event_dtdComboBoxItemStateChanged

    private void targetFileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_targetFileListValueChanged
        targetFileTextField.setText(targetFileList.getSelectedValue());
    }//GEN-LAST:event_targetFileListValueChanged

    private void adjustDTDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjustDTDButtonActionPerformed
      
    }//GEN-LAST:event_adjustDTDButtonActionPerformed

    /**
     * Set DTDs in textfields.
     */  
    private void setDTD() {
        firstEditor.setText(currentDtdServer);
        if(needEditor) {
            secondEditor.setText(currentDtdHelper);
        }
    }
    
    /**
     * Read all DTDs from resources and save it.
     */    
    private void readDTDs() {
        dtds = new ArrayList<>();
        dtdNames = new ArrayList<>();
        File dir = new File(System.getProperty("user.home")+"/NDS/nds_git/BurpSSOExtension-Development/src/main/resources/dtd");
        File[] files = dir.listFiles();
        for (File config : files) {
            try {
                Document dtd = XMLHelper.stringToDom(FileUtils.readFileToString(config, "UTF-8"));
                dtds.add(dtd);
                dtdNames.add(dtd.getElementsByTagName("name").item(0).getTextContent());
                dtdComboBox.addItem(dtd.getElementsByTagName("name").item(0).getTextContent());
            } catch (IOException ex) {
                Logging.getInstance().log(getClass(), config.getPath() + " can not read", Logging.DEBUG);
            }
        }
        attackeListenerTextField.getDocument().addDocumentListener(new TextfieldListener(listenURL));
        helperURLTextField.getDocument().addDocumentListener(new TextfieldListener(helperURL));
        targetFileTextField.getDocument().addDocumentListener(new TextfieldListener(targetFILE));
    }

     /**
     * Clear and disable textfields
     */
    private void disableAndClearTextfields() {
        adjustDTDButton.setEnabled(false);
        recursiveEntitieTextField.setEnabled(false);
        recursiveEntitieTextField.setText("");
        entityReferencesTextField.setEnabled(false);
        entityReferencesTextField.setText("");
        targetFileTextField.setEnabled(false);
        targetFileTextField.setText("");
        targetFileList.setEnabled(false);
        targetFileList.setSelectedIndex(-1);
        helperURLTextField.setEnabled(false);
        helperURLTextField.setText("");
        attackeListenerTextField.setEnabled(false);
        attackeListenerTextField.setText("");
        firstEditor.setText("");
        secondEditor.setText("");
    }  
    
    /**
     * Is called every time new Code is available.
     * @param evt {@link de.rub.nds.burp.utilities.listeners.AbstractCodeEvent} The new source code.
     */
    @Override
    public void setCode(AbstractCodeEvent evt) {
        this.code = evt.getCode();
    }

    /**
     * Notify all registered listeners with the new code.
     * @param code The new source code.
     */
    @Override
    public void notifyAllTabs(String code) {
        if(listeners != null){
            listeners.notifyAll(new SamlCodeEvent(this, code));
        }
    }

    /**
     * Set the listener for the editor.
     * @param listeners {@link de.rub.nds.burp.utilities.listeners.CodeListenerController}
     */
    @Override
    public void setListener(CodeListenerController listeners) {
        this.listeners = listeners;
        this.listeners.addCodeListener(this);
    }

    /**
     * Listener for textfields.
     */
    class TextfieldListener implements DocumentListener {      
        
        private final String keyword;
        
        public TextfieldListener(String keyword) {
            this.keyword = keyword;
        }

        private void update(DocumentEvent de) {
            try {
                if(selectedDtdServer.contains(keyword)) {
                    currentDtdServer = selectedDtdServer.replace(keyword, de.getDocument().getText(0, de.getDocument().getLength()));
                }
                if(selectedDtdHelper.contains(keyword)) {
                    currentDtdHelper = selectedDtdHelper.replace(keyword, de.getDocument().getText(0, de.getDocument().getLength()));
                }
                setDTD();
            } catch (BadLocationException ex) {
                Logging.getInstance().log(getClass(), "Error during replacing", Logging.DEBUG);
            }
        }
        
        @Override
        public void insertUpdate(DocumentEvent de) {
            update(de);
        }
        
        @Override
        public void removeUpdate(DocumentEvent de) {
            update(de);
        }

        @Override
        public void changedUpdate(DocumentEvent de) {
            update(de);
        }        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adjustDTDButton;
    private javax.swing.JTextField attackeListenerTextField;
    private javax.swing.JComboBox<String> dtdComboBox;
    private javax.swing.JTextField entityReferencesTextField;
    private javax.swing.JTextField helperURLTextField;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton modifyButton;
    private javax.swing.JTextField recursiveEntitieTextField;
    private javax.swing.JList<String> targetFileList;
    private javax.swing.JTextField targetFileTextField;
    // End of variables declaration//GEN-END:variables
}